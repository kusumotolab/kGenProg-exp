Wed Jun 12 08:53:29 UTC 2019
/opt/apr-data/example/math058
java -jar /opt/apr-data/bin/kgp.jar -r ./ -s src/main/java -t src/test/java -x org.apache.commons.math.optimization.fitting.GaussianFitterTest --time-limit 1800 --test-time-limit 3 --max-generation 10000 --headcount 5 --mutation-generating-count 10 --crossover-generating-count 0 --random-seed 0 -o /opt/apr-data/tmp
JUNIT4_CUSTOM
2019-06-12 08:53:29 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = [org.apache.commons.math.optimization.fitting.GaussianFitterTest]
workingDir = /tmp/kgenprog-work867879747467252378
outDir = /opt/apr-data/tmp
mutationGeneratingCount = 10
crossoverGeneratingCount = 0
headcount = 5
maxGeneration = 10000
timeLimit = PT30M
testTimeLimit = PT3S
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 0
scope = PACKAGE
needNotOutput = false
currentDirectory = /opt/apr-data/example/math058
================================================================
2019-06-12 08:53:35 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-06-12 08:53:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 seconds
Variants: generated 10, syntax-valid 9, build-succeeded 1
Fitness: max 0.875(1), min 0.875(1), ave 0.875
----------------------------------------------------------------

2019-06-12 08:53:37 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-06-12 08:53:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 seconds
Variants: generated 10, syntax-valid 5, build-succeeded 0
Fitness: max --, min --, ave NaN
----------------------------------------------------------------

2019-06-12 08:53:39 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-06-12 08:53:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 seconds
Variants: generated 10, syntax-valid 5, build-succeeded 1
Fitness: max 0.875(1), min 0.875(1), ave 0.875
----------------------------------------------------------------

2019-06-12 08:53:41 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-06-12 08:53:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 seconds
Variants: generated 10, syntax-valid 7, build-succeeded 1
Fitness: max 0.875(1), min 0.875(1), ave 0.875
----------------------------------------------------------------

2019-06-12 08:53:43 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-06-12 08:53:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 seconds
Variants: generated 10, syntax-valid 8, build-succeeded 3
Fitness: max 0.875(2), min 0.25(1), ave 0.6666666666666666
----------------------------------------------------------------

2019-06-12 08:53:47 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-06-12 08:53:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 seconds
Variants: generated 10, syntax-valid 6, build-succeeded 3
Fitness: max 0.875(3), min 0.875(3), ave 0.875
----------------------------------------------------------------

2019-06-12 08:53:50 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2019-06-12 08:53:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 seconds
Variants: generated 10, syntax-valid 7, build-succeeded 3
Fitness: max 0.875(3), min 0.875(3), ave 0.875
----------------------------------------------------------------

2019-06-12 08:53:57 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2019-06-12 08:54:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 seconds
Variants: generated 10, syntax-valid 9, build-succeeded 1
Fitness: max 0.875(1), min 0.875(1), ave 0.875
----------------------------------------------------------------

2019-06-12 08:54:00 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2019-06-12 08:54:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 seconds
Variants: generated 10, syntax-valid 8, build-succeeded 2
Fitness: max 0.875(2), min 0.875(2), ave 0.875
----------------------------------------------------------------

2019-06-12 08:54:04 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2019-06-12 08:54:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 seconds
Variants: generated 10, syntax-valid 9, build-succeeded 2
Fitness: max 0.875(2), min 0.875(2), ave 0.875
----------------------------------------------------------------

2019-06-12 08:54:07 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2019-06-12 08:54:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 seconds
Variants: generated 10, syntax-valid 5, build-succeeded 1
Fitness: max 1.0(1), min 1.0(1), ave 1.0
----------------------------------------------------------------

2019-06-12 08:54:09 [main] [INFO]  KGenProgMain - found enough solutions.
2019-06-12 08:54:09 [main] [INFO]  Patch - 
--- org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer
+++ org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer
@@ -546,10 +546,7 @@
         }
         double gNorm = FastMath.sqrt(sum2);
         double paru = gNorm / delta;
-        if (paru == 0) {
-            // 2.2251e-308 is the smallest positive real for IEE754
-            paru = 2.2251e-308 / FastMath.min(delta, 0.1);
-        }
+        if (paru == 0)
 
         // if the input par lies outside of the interval (parl,paru),
         // set par to the closer endpoint
@@ -592,7 +589,6 @@
             // compute the Newton correction
             for (int j = 0; j < solvedCols; ++j) {
                 int pj = permutation[j];
-                work1[pj] = work3[pj] * diag[pj] / dxNorm;
             }
             for (int j = 0; j < solvedCols; ++j) {
                 int pj = permutation[j];
@@ -776,6 +772,7 @@
                 norm2 += akk * akk;
             }
             jacNorm[k] = FastMath.sqrt(norm2);
+			final ConvergenceChecker<VectorialPointValuePair> checker=getConvergenceChecker();
         }
 
         // transform the matrix column after column
2019-06-12 08:54:11 [main] [INFO]  KGenProgMain - execution time: 35 seconds
2019-06-12 08:54:11 [main] [INFO]  KGenProgMain - Total Variants: generated 110, syntax-valid 78, build-succeeded 18


real 42.106
user 103.020
sys  2.324
