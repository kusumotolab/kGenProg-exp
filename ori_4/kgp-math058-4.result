Sat Jun 29 18:00:10 UTC 2019
/opt/apr-data/example/math058
java -jar /opt/apr-data/bin/kgp.jar --config kgenprog.toml
2019-06-29 18:00:10 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = 
executionTests = [org.apache.commons.math.optimization.fitting.GaussianFitterTest]
outDir = /opt/apr-data/tmp
mutationGeneratingCount = 10
crossoverGeneratingCount = 0
headcount = 5
maxGeneration = 20000
timeLimit = PT1H
testTimeLimit = PT10S
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 4
scope = PACKAGE
needNotOutput = false
faultLocalization = Ochiai
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
currentDirectory = /opt/apr-data/example/math058
================================================================
2019-06-29 18:00:15 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-06-29 18:00:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 seconds
Variants: generated 10, build-succeeded 4, build-failed 3, syntax-invalid 1, redundant 2
Fitness: max 1.0(1), min 0.25(1), ave 0.75
----------------------------------------------------------------

2019-06-29 18:00:46 [main] [INFO]  KGenProgMain - enough solutions have been found.
2019-06-29 18:00:46 [main] [INFO]  KGenProgMain - GA stopped at the era of 1st generation.
2019-06-29 18:00:46 [main] [INFO]  Patch - 
--- org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer
+++ org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer
@@ -575,7 +575,6 @@
             for (int j = 0; j < solvedCols; ++j) {
                 int pj = permutation[j];
                 double s = diag[pj] * lmDir[pj];
-                work3[pj] = s;
                 dxNorm += s * s;
             }
             dxNorm = FastMath.sqrt(dxNorm);
2019-06-29 18:00:46 [main] [INFO]  KGenProgMain - execution time: 31 seconds

real 36.752
user 81.079
sys  0.925
