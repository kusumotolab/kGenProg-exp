Thu Jun 20 02:39:54 UTC 2019
/opt/apr-data/t-kuma-example/math002
java -jar /opt/apr-data/bin/kgp.jar --config kgenprog.toml
2019-06-20 02:39:54 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = 
executionTests = [org.apache.commons.math3.distribution.HypergeometricDistributionTest]
outDir = /opt/apr-data/tmp
mutationGeneratingCount = 10
crossoverGeneratingCount = 0
headcount = 5
maxGeneration = 20000
timeLimit = PT1H
testTimeLimit = PT10S
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 0
scope = PACKAGE
needNotOutput = false
faultLocalization = Ochiai
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
currentDirectory = /opt/apr-data/t-kuma-example/math002
================================================================
2019-06-20 02:40:02 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-06-20 02:40:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 seconds
Variants: generated 10, build-succeeded 2, build-failed 6, syntax-invalid 1, redundant 1
Fitness: max 0.96875(1), min 0.90625(1), ave 0.9375
----------------------------------------------------------------

2019-06-20 02:40:03 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-06-20 02:40:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 seconds
Variants: generated 10, build-succeeded 2, build-failed 8, syntax-invalid 0, redundant 0
Fitness: max 0.90625(2), min 0.90625(2), ave 0.90625
----------------------------------------------------------------

2019-06-20 02:40:05 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-06-20 02:40:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 seconds
Variants: generated 10, build-succeeded 1, build-failed 6, syntax-invalid 0, redundant 3
Fitness: max 0.96875(1), min 0.96875(1), ave 0.96875
----------------------------------------------------------------

2019-06-20 02:40:06 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-06-20 02:40:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 seconds
Variants: generated 10, build-succeeded 3, build-failed 7, syntax-invalid 0, redundant 0
Fitness: max 0.96875(2), min 0.90625(1), ave 0.9479166666666666
----------------------------------------------------------------

2019-06-20 02:40:07 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-06-20 02:40:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 seconds
Variants: generated 10, build-succeeded 2, build-failed 8, syntax-invalid 0, redundant 0
Fitness: max 0.9375(1), min 0.90625(1), ave 0.921875
----------------------------------------------------------------

2019-06-20 02:40:08 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-06-20 02:40:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 seconds
Variants: generated 10, build-succeeded 2, build-failed 7, syntax-invalid 0, redundant 1
Fitness: max 1.0(1), min 0.0(1), ave 0.5
----------------------------------------------------------------

2019-06-20 02:40:09 [main] [INFO]  KGenProgMain - enough solutions have been found.
2019-06-20 02:40:09 [main] [INFO]  KGenProgMain - GA stopped at the era of 6th generation.
2019-06-20 02:40:09 [main] [INFO]  Patch - 
--- org.apache.commons.math3.random.Well19937c
+++ org.apache.commons.math3.random.Well19937c
@@ -99,7 +99,6 @@
 
         v[index]     = z3;
         v[indexRm1]  = z4;
-        v[indexRm2] &= 0x80000000;
         index        = indexRm1;
 
 
2019-06-20 02:40:09 [main] [INFO]  Patch - 
--- org.apache.commons.math3.distribution.AbstractIntegerDistribution
+++ org.apache.commons.math3.distribution.AbstractIntegerDistribution
@@ -116,6 +116,7 @@
         }
 
         int upper = getSupportUpperBound();
+		int max = Integer.MIN_VALUE;
         if (p == 1.0) {
             return upper;
         }
@@ -135,7 +136,6 @@
             k = 1.0 / k;
             tmp = mu + k * sigma;
             if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
             }
         }
 
2019-06-20 02:40:11 [main] [INFO]  KGenProgMain - execution time: 8 seconds

real 17.121
user 86.786
sys  2.144
