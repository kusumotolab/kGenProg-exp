Sun Apr 14 04:08:38 UTC 2019
/opt/apr-data/example/math078
java -jar /opt/apr-data/bin/kgp.jar -r ./ -s src/main/java -t src/test/java -x org.apache.commons.math.ode.events.EventStateTest --time-limit 1800 --test-time-limit 3 --max-generation 10000 --headcount 5 --mutation-generating-count 10 --crossover-generating-count 10 --crossover-type=Random --crossover-first-variant=Elite --crossover-second-variant=TestComplementary --random-seed 1 -o /opt/apr-data/tmp
2019-04-14 04:08:38 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = [org.apache.commons.math.ode.events.EventStateTest]
outDir = /opt/apr-data/tmp
mutationGeneratingCount = 10
crossoverGeneratingCount = 10
headcount = 5
maxGeneration = 10000
timeLimit = PT30M
testTimeLimit = PT3S
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 1
scope = PACKAGE
needNotOutput = false
faultLocalization = Ochiai
crossoverType = Random
firstVariantSelectionStrategy = Elite
secondVariantSelectionStrategy = TestComplementary
currentDirectory = /opt/apr-data/example/math078
================================================================
2019-04-14 04:08:44 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-04-14 04:08:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 0 seconds
Variants: generated 10, syntax-valid 10, build-succeeded 2
Fitness: max 0.0(2), min 0.0(2), ave 0.0
----------------------------------------------------------------

2019-04-14 04:08:45 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-04-14 04:08:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 seconds
Variants: generated 10, syntax-valid 7, build-succeeded 1
Fitness: max 0.0(1), min 0.0(1), ave 0.0
----------------------------------------------------------------

2019-04-14 04:08:46 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-04-14 04:08:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 seconds
Variants: generated 10, syntax-valid 8, build-succeeded 2
Fitness: max 0.0(2), min 0.0(2), ave 0.0
----------------------------------------------------------------

2019-04-14 04:08:46 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-04-14 04:08:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 seconds
Variants: generated 20, syntax-valid 8, build-succeeded 2
Fitness: max 0.0(2), min 0.0(2), ave 0.0
----------------------------------------------------------------

2019-04-14 04:08:47 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-04-14 04:08:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 seconds
Variants: generated 20, syntax-valid 10, build-succeeded 5
Fitness: max 0.0(5), min 0.0(5), ave 0.0
----------------------------------------------------------------

2019-04-14 04:08:49 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-04-14 04:08:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 seconds
Variants: generated 20, syntax-valid 15, build-succeeded 9
Fitness: max 1.0(1), min 0.0(8), ave 0.1111111111111111
----------------------------------------------------------------

2019-04-14 04:08:51 [main] [INFO]  KGenProgMain - enough solutions have been found.
2019-04-14 04:08:51 [main] [INFO]  KGenProgMain - GA stopped at the era of 6th generation.
2019-04-14 04:08:51 [main] [INFO]  Patch - 
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					setResult(x1, i);
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2019-04-14 04:08:51 [main] [INFO]  Patch - 
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
2019-04-14 04:08:51 [main] [INFO]  Patch - 
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -218,8 +218,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2019-04-14 04:08:51 [main] [INFO]  KGenProgMain - execution time: 6 seconds

real 13.020
user 65.643
sys  1.198
