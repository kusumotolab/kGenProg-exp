Sun Apr 14 04:07:50 UTC 2019
/opt/apr-data/example/math078
java -jar /opt/apr-data/bin/kgp.jar -r ./ -s src/main/java -t src/test/java -x org.apache.commons.math.ode.events.EventStateTest --time-limit 1800 --test-time-limit 3 --max-generation 10000 --headcount 5 --mutation-generating-count 20 --crossover-generating-count 0 --crossover-type=Random --crossover-first-variant=Random --crossover-second-variant=Random --random-seed 1 -o /opt/apr-data/tmp
2019-04-14 04:07:51 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = [org.apache.commons.math.ode.events.EventStateTest]
outDir = /opt/apr-data/tmp
mutationGeneratingCount = 20
crossoverGeneratingCount = 0
headcount = 5
maxGeneration = 10000
timeLimit = PT30M
testTimeLimit = PT3S
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 1
scope = PACKAGE
needNotOutput = false
faultLocalization = Ochiai
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
currentDirectory = /opt/apr-data/example/math078
================================================================
2019-04-14 04:07:56 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-04-14 04:07:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 seconds
Variants: generated 20, syntax-valid 18, build-succeeded 4
Fitness: max 1.0(1), min 0.0(3), ave 0.25
----------------------------------------------------------------

2019-04-14 04:07:58 [main] [INFO]  KGenProgMain - enough solutions have been found.
2019-04-14 04:07:58 [main] [INFO]  KGenProgMain - GA stopped at the era of 1st generation.
2019-04-14 04:07:58 [main] [INFO]  Patch - 
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2019-04-14 04:07:58 [main] [INFO]  KGenProgMain - execution time: 1 seconds

real 7.503
user 52.561
sys  0.749
