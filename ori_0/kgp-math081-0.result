Thu Jun 20 22:02:14 UTC 2019
/opt/apr-data/example/math081
java -jar /opt/apr-data/bin/kgp.jar --config kgenprog.toml
2019-06-20 22:02:14 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = 
executionTests = [org.apache.commons.math.linear.EigenDecompositionImplTest]
outDir = /opt/apr-data/tmp
mutationGeneratingCount = 10
crossoverGeneratingCount = 0
headcount = 5
maxGeneration = 20000
timeLimit = PT1H
testTimeLimit = PT10S
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 0
scope = PACKAGE
needNotOutput = false
faultLocalization = Ochiai
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
currentDirectory = /opt/apr-data/example/math081
================================================================
2019-06-20 22:02:20 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-06-20 22:02:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 seconds
Variants: generated 10, build-succeeded 2, build-failed 7, syntax-invalid 1, redundant 0
Fitness: max 0.9411764705882353(1), min 0.8823529411764706(1), ave 0.9117647058823529
----------------------------------------------------------------

2019-06-20 22:02:21 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-06-20 22:02:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 seconds
Variants: generated 10, build-succeeded 0, build-failed 7, syntax-invalid 0, redundant 3
Fitness: max --, min --, ave NaN
----------------------------------------------------------------

2019-06-20 22:02:22 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-06-20 22:02:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 seconds
Variants: generated 10, build-succeeded 1, build-failed 4, syntax-invalid 0, redundant 5
Fitness: max 0.9411764705882353(1), min 0.9411764705882353(1), ave 0.9411764705882353
----------------------------------------------------------------

2019-06-20 22:02:22 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-06-20 22:02:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 seconds
Variants: generated 10, build-succeeded 2, build-failed 6, syntax-invalid 0, redundant 2
Fitness: max 0.8823529411764706(1), min 0.8235294117647058(1), ave 0.8529411764705882
----------------------------------------------------------------

2019-06-20 22:02:23 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-06-20 22:02:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 seconds
Variants: generated 10, build-succeeded 3, build-failed 5, syntax-invalid 0, redundant 2
Fitness: max 0.9411764705882353(1), min 0.5294117647058824(1), ave 0.7843137254901961
----------------------------------------------------------------

2019-06-20 22:02:24 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-06-20 22:02:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 seconds
Variants: generated 10, build-succeeded 3, build-failed 5, syntax-invalid 0, redundant 2
Fitness: max 0.9411764705882353(1), min 0.5294117647058824(2), ave 0.6666666666666666
----------------------------------------------------------------

2019-06-20 22:02:35 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2019-06-20 22:02:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 seconds
Variants: generated 10, build-succeeded 3, build-failed 5, syntax-invalid 0, redundant 2
Fitness: max 1.0(1), min 0.9411764705882353(2), ave 0.9607843137254902
----------------------------------------------------------------

2019-06-20 22:02:36 [main] [INFO]  KGenProgMain - enough solutions have been found.
2019-06-20 22:02:36 [main] [INFO]  KGenProgMain - GA stopped at the era of 7th generation.
2019-06-20 22:02:36 [main] [INFO]  Patch - 
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -871,7 +871,6 @@
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
-                    diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
                 diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
@@ -1096,8 +1095,6 @@
                         // failed twice. Play it safe.
                         tau = 0.0;
                     } else if (dMin1 > 0.0) {
-                        // late failure. Gives excellent shift.
-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
                         tType -= 11;
                     } else {
                         // early failure. Divide by 4.
@@ -1469,59 +1466,6 @@
                         tau   = Math.max(s, 0.333 * dMin);
                         tType = -3;
                     }
-                } else {
-                    // case 4.
-                    tType = -4;
-                    double s = 0.25 * dMin;
-                    double gam;
-                    int np;
-                    if (dMin == dN) {
-                        gam = dN;
-                        a2 = 0.0;
-                        if (work[nn - 5]  >  work[nn - 7]) {
-                            return;
-                        }
-                        b2 = work[nn - 5] / work[nn - 7];
-                        np = nn - 9;
-                    } else {
-                        np = nn - 2 * pingPong;
-                        b2 = work[np - 2];
-                        gam = dN1;
-                        if (work[np - 4]  >  work[np - 2]) {
-                            return;
-                        }
-                        a2 = work[np - 4] / work[np - 2];
-                        if (work[nn - 9]  >  work[nn - 11]) {
-                            return;
-                        }
-                        b2 = work[nn - 9] / work[nn - 11];
-                        np = nn - 13;
-                    }
-
-                    // approximate contribution to norm squared from i < nn-1.
-                    a2 = a2 + b2;
-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if(b2 == 0.0) {
-                            break;
-                        }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
-                            break;
-                        }
-                    }
-                    a2 = cnst3 * a2;
-
-                    // rayleigh quotient residual bound.
-                    if (a2 < cnst1) {
-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);
-                    }
-                    tau = s;
-
                 }
             } else if (dMin == dN2) {
 
2019-06-20 22:02:37 [main] [INFO]  KGenProgMain - execution time: 16 seconds

real 23.167
user 74.859
sys  1.425
